import org.gradle.api.internal.classpath.ModuleRegistry
import org.gradle.api.internal.project.ProjectInternal

plugins {
    alias(libs.plugins.detekt)
    alias(libs.plugins.dokka)
    id 'java-gradle-plugin'
    alias(libs.plugins.jfrog)
    alias(libs.plugins.kotlin)
    id 'maven-publish'
    alias(libs.plugins.pitest)
    id 'version-catalog'
}

publishToMavenLocal {
    dependsOn check
}

repositories {
    mavenCentral()
    google()
    maven {
        url = 'https://plugins.gradle.org/m2/'
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

dependencies {
    implementation libs.commons.lang
    implementation libs.bundles.spring

    // Dependencies needed for applying other plugins
    implementation libs.android.gradle
    implementation libs.detekt
    implementation libs.dokka
    implementation libs.gatling
    implementation libs.kotlin.allopen
    implementation libs.kotlin.gradle.plugin
    implementation libs.node
    implementation libs.pitest
    implementation libs.sonar
    implementation libs.spring.boot.plugin
    implementation libs.spring.dependency.mgmt

    testImplementation libs.bundles.test

    def toolingApiBuildersJar = (project as ProjectInternal).services.get(ModuleRegistry.class)
            .getModule("gradle-tooling-api-builders")
            .classpath
            .asFiles
            .first()
    testRuntimeOnly(files(toolingApiBuildersJar))
}

group = 'com.tpero.gradle'
version = '0.0'

catalog {
    versionCatalog {
        from(files('gradle/libs.versions.toml'))
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            alias = 'version-catalog'
            artifactId = 'version-catalog'
            from components.versionCatalog
        }
    }

    repositories {
        maven {
            name = 'tperoRemoteMvn'
            url = uri('https://maven.pkg.github.com/tdp0516/mvn-repo/')
            credentials {
                username = project.properties['tpero.mvn.remote.user']
                password = project.properties['tpero.mvn.remote.password']
            }
        }
    }
}

// Alias for publishing to remote repo
tasks.register('publishToTperoRemote') {
    dependsOn 'publishMavenPublicationToTperoRemoteMvnRepository'
}

// Alias for publishing to local repo
tasks.register('publishToTperoLocal') {
    dependsOn 'publishMavenPublicationToTperoLocalMvnRepository'
}

gradlePlugin {
    plugins {
        register('jvm') {
            id = 'jvm'
            version = '0.0.0-SNAPSHOT'
            implementationClass = 'com.tpero.gradle.jvm.JvmPlugin'
        }

        register('jvm-quality') {
            id = 'jvm-quality'
            version = '0.0.0-SNAPSHOT'
            implementationClass = 'com.tpero.gradle.jvm.JvmQualityPlugin'
        }

        register('android') {
            id = 'android'
            version = '0.0.0-SNAPSHOT'
            implementationClass = 'com.tpero.gradle.jvm.AndroidPlugin'
        }

        register('jvm-lib') {
            id = 'jvm-lib'
            version = '0.0.0-SNAPSHOT'
            implementationClass = 'com.tpero.gradle.jvm.JvmLibPlugin'
        }

        register('spring') {
            id = 'spring'
            version = '0.0.0-SNAPSHOT'
            implementationClass = 'com.tpero.gradle.jvm.SpringPlugin'
        }

        register('spring-quality') {
            id = 'spring-quality'
            version = '0.0.0-SNAPSHOT'
            implementationClass = 'com.tpero.gradle.jvm.SpringQualityPlugin'
        }

        register('node-quality') {
            id = 'node-quality'
            version = '0.0.0-SNAPSHOT'
            implementationClass = 'com.tpero.gradle.node.NodeQualityPlugin'
        }
    }
}

detekt {
    buildUponDefaultConfig = true
    config = files('src/main/resources/detekt.yml')
}

pitest {
    testPlugin.set('KotlinTest')
    targetClasses.set(['com.tpero.gradle.*'])
    outputFormats.set(['HTML', 'XML'])
    timestampedReports.set(false)
    enableDefaultIncrementalAnalysis.set(true)
    useClasspathFile.set(true)
}
